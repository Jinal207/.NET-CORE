//using System.ComponentModel.DataAnnotations.Schema;
//using System.ComponentModel.DataAnnotations;

//namespace Bank.Api.Demo
//{
//    public class DataAnnotationsCheatSheet
//    {
//        // Required - Ensures the property must have a value; cannot be null or empty
//        // Example:
//        [Required(ErrorMessage = "Account name is required")]
//        public string AccountName { get; set; }

//        // StringLength - Restricts the length of a string property (min and max)
//        // Example:
//        [StringLength(20, MinimumLength = 3, ErrorMessage = "Name must be between 3 and 20 characters")]
//        public string Name { get; set; }

//        // MaxLength - Sets the maximum length of a string (used in DB mapping too)
//        // Example:
//        [MaxLength(50)]
//        public string Description { get; set; }

//        // MinLength - Sets the minimum length of a string
//        // Example:
//        [MinLength(3)]
//        public string Code { get; set; }

//        // Range - Ensures a numeric value falls within a specified range
//        // Example:
//        [Range(0, double.MaxValue, ErrorMessage = "Balance must be zero or positive")]
//        public double Balance { get; set; }

//        // EmailAddress - Validates that the property contains a valid email format
//        // Example:
//        [EmailAddress(ErrorMessage = "Invalid email address")]
//        public string Email { get; set; }

//        // Phone - Validates that the property contains a valid phone number
//        // Example:
//        [Phone(ErrorMessage = "Invalid phone number")]
//        public string Phone { get; set; }

//        // Url - Validates that the property contains a valid URL
//        // Example:
//        [Url(ErrorMessage = "Invalid URL")]
//        public string Website { get; set; }

//        // RegularExpression - Validates the property using a custom regex pattern
//        // Example:
//        [RegularExpression(@"^[A-Z][a-zA-Z]*$", ErrorMessage = "Must start with a capital letter")]
//        public string FirstName { get; set; }

//        // Compare - Compares the property with another property (e.g., password confirmation)
//        // Example:
//        [Compare("Password", ErrorMessage = "Passwords do not match")]
//        public string ConfirmPassword { get; set; }

//        // CreditCard - Validates that the property contains a valid credit card number
//        // Example:
//        [CreditCard(ErrorMessage = "Invalid credit card number")]
//        public string CardNumber { get; set; }

//        // DataType - Specifies the type of data for formatting (Date, Time, Currency, Password)
//        // Example:
//        [DataType(DataType.Date)]
//        public DateTime BirthDate { get; set; }

//        // Key - Marks the property as a primary key in the database
//        // Example:
//        [Key]
//        public Guid AccountId { get; set; }

//        // Column - Maps the property to a specific column in the database
//        // Example:
//        [Column("account_name")]
//        public string AccountNameColumn { get; set; }

//        // Table - Maps the class to a database table
//        // Example:
//        [Table("BankAccounts")]
//        public class BankDetails { ... }

//        // ForeignKey - Defines a foreign key relationship to another entity
//        // Example:
//        [ForeignKey("UserId")]
//        public Guid OwnerId { get; set; }

//        // NotMapped - Excludes the property from database mapping
//        // Example:
//        [NotMapped]
//        public string TempData { get; set; }

//        // DatabaseGenerated - Specifies if the property value is generated by the database (Identity, Computed)
//        // Example:
//        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
//        public DateTime CreatedDate { get; set; }

//        // Display - Sets a user-friendly display name for the property
//        // Example:
//        [Display(Name = "Account Name")]
//        public string DisplayName { get; set; }

//        // DisplayFormat - Controls formatting of data when displayed (e.g., date, currency)
//        // Example:
//        [DisplayFormat(DataFormatString = "{0:C}")]
//        public double BalanceDisplay { get; set; }

//        // ScaffoldColumn - Determines if the property appears in scaffolding/UI forms
//        // Example:
//        [ScaffoldColumn(false)]
//        public Guid InternalId { get; set; }

//        // Editable - Marks the property as editable or read-only in UI forms
//        // Example:
//        [Editable(false)]
//        public DateTime CreatedDateReadonly { get; set; }

//        // Custom Validation Attribute - Allows creation of custom validation rules for business logic
//        // Example:
//        public class MinBalanceAttribute : ValidationAttribute
//        {
//            private readonly double _min;
//            public MinBalanceAttribute(double min) { _min = min; }
//            public override bool IsValid(object value)
//            {
//                return value is double balance && balance >= _min;
//            }
//        }
//        [MinBalance(100, ErrorMessage = "Balance must be at least 100")]
//        public double CustomBalance { get; set; }
//    }
//}

// [FromRoute] - Binds values from the URL route parameters to action method parameters
// [FromQuery] - Binds values from the query string (?key=value) to action method parameters
// [FromBody] - Binds values from the reque st body (usually JSON) to complex objects or parameters
// [FromForm] - Binds values from form data (x-www-form-urlencoded or multipart/form-data)
// [FromHeader] - Binds values from HTTP headers to parameters
// [FromServices] - Injects registered services from dependency injection into action method parameters
// Complex type binding - Automatically maps JSON or query string to object properties
// List/Array binding - Supports binding arrays or lists from JSON body or query string
// Model binding is automatic - ASP.NET Core automatically converts types and populates parameters
// Works with simple and complex types - int, string, Guid, objects, nested objects, lists
// Integration with validation - Works seamlessly with Data Annotations and ModelState validation